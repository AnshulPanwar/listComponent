import Validation from './validation-rules';

describe('Validation Rules', () => {
    describe('containsLetter', () => {
        it('Should return false if a letter character was not provided', () => {
            expect(Validation.containsLetter('230@#*$()#@948')).toBe(false);
        });

        it('Should return true if a letter character was provided', () => {
            expect(Validation.containsLetter('2309f2j3f0 ad0f9)*)29SD2DF@#()')).toBe(true);
        });
    });

    describe('containsNumber', () => {
        it('Should return false if a numeric character was not provided', () => {
            expect(Validation.containsNumber('aldkfjlaLKSJDFKj_@#*$(&)')).toBe(false);
        });

        it('Should return true if a numeric character was provided', () => {
            expect(Validation.containsNumber('a239048ldkfjlaLKSJDFKj_@#*$(&)')).toBe(true);
        });
    });

    describe('containsSpaces', () => {
        it('Should return false if a space character was not provided', () => {
            expect(Validation.containsSpaces('sdfkj20*(#@UdJK_)')).toBe(false);
        });

        it('Should return true if a space character was provided', () => {
            expect(Validation.containsSpaces('sdfkj 20*(# @UdJK_)')).toBe(true);
        });
    });

    describe('isMinimumLength', () => {
        it('Should return false if a minimum character count was not met', () => {
            expect(Validation.isMinimumLength('asfd', 8)).toBe(false);
        });

        it('Should return true if a minimum character count was met', () => {
            expect(Validation.isMinimumLength('asdfjll23jlkasdf', 8)).toBe(true);
        });
    });

    describe('isNotAllSpaces', () => {
        it('Should return false if only space characters were provided', () => {
            expect(Validation.isNotAllSpaces('   ')).toBe(false);
        });

        it('Should return true if characters other than spaces were provided', () => {
            expect(Validation.isNotAllSpaces('29fjoi(W*C#( 29c8j2c  ))')).toBe(true);
        });
    });

    describe('isNotOverMaxLength', () => {
        it('Should return false if a maximum character count was exceeded', () => {
            expect(Validation.isNotOverMaxLength('asdflkj23oijlsdkfjas', 8)).toBe(false);
        });

        it('Should return true if a maximum character count was not exceeded', () => {
            expect(Validation.isNotOverMaxLength('asdfl', 8)).toBe(true);
        });
    });

    describe('isRequired', () => {
        it('Should return false if no characters were provided', () => {
            expect(Validation.isRequired('')).toBe(false);
        });

        it('Should return true if characters were provided', () => {
            expect(Validation.isRequired('asdf*UOIJ@#F')).toBe(true);
        });
    });

    describe('isValidEmail', () => {
        it('Should return false if a valid email was not provided', () => {
            expect(Validation.isValidEmail('asdflkj@sd')).toBe(false);
            expect(Validation.isValidEmail('asdflsd.com')).toBe(false);
        });

        it('Should return true if a valid email was provided', () => {
            expect(Validation.isValidEmail('valid@email.com')).toBe(true);
        });
    });

    describe('isValidPhone', () => {
        it('Should return false if a valid phone number was not provided', () => {
            expect(Validation.isValidPhone('2349')).toBe(false);
        });

        it('Should return true if a valid phone number was provided', () => {
            expect(Validation.isValidPhone('2484567890')).toBe(true);
        });
    });

    describe('', () => {
        it('Should return false if a valid social security number was not provided', () => {
            expect(Validation.isValidSocialSecurityNumber('234')).toBe(false);
            expect(Validation.isValidSocialSecurityNumber('901123456')).toBe(false);
            expect(Validation.isValidSocialSecurityNumber('23400')).toBe(false);
            expect(Validation.isValidSocialSecurityNumber('219099999')).toBe(false);
        });

        it('Should return true if a valid social security number was provided', () => {
            expect(Validation.isValidSocialSecurityNumber('3671234567'));
        });
    });
});
