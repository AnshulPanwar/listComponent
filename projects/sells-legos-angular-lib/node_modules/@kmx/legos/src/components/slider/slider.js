function updateSliderValue(id, singleValue, lowerValue, upperValue) {
    if (lowerValue) {
        id.noUiSlider.set([lowerValue, upperValue]);
    } else {
        id.noUiSlider.set(singleValue);
    }
}

Math.trunc = Math.trunc || function truncPolyfill(x) {
    if (Number.isNaN(x)) {
        return NaN;
    }
    if (x > 0) {
        return Math.floor(x);
    }
    return Math.ceil(x);
};

function sliderKeyPress(event) {
    const keyName = event.key;
    const acceptableKeys = ['ArrowLeft', 'Left', 'ArrowUp', 'Up', 'ArrowRight', 'Right', 'ArrowDown', 'Down', 'PageUp', 'PageDown', 'Home', 'End'];
    if (acceptableKeys.indexOf(keyName) > -1) {
        const currentValue = Math.trunc(document.activeElement.getAttribute('aria-valuenow'));
        const currentMin = Math.trunc(document.activeElement.getAttribute('aria-valuemin'));
        const currentMax = Math.trunc(document.activeElement.getAttribute('aria-valuemax'));
        const currentId = event.currentTarget.children[0].id;
        const currentClass = document.activeElement.classList;
        const currentElement = document.getElementById(currentId);
        const currentSlider = currentElement.noUiSlider;
        const currentValues = currentSlider.get();
        // eslint-disable-next-line max-len
        const stepValue = currentSlider.options && currentSlider.options.step ? currentSlider.options.step : null;
        let lowerValue = currentValues[0] ? currentValues[0] : null;
        let upperValue = currentValues[1] ? currentValues[1] : null;
        let newValue;

        event.preventDefault();

        if (!currentElement.attributes.disabled) {
            switch (keyName) {
            case 'ArrowRight':
            case 'ArrowUp':
            case 'Right':
            case 'Up':
                if (currentValue === 100) {
                    newValue = 100;
                } else if (stepValue) {
                    newValue = currentValue + stepValue;
                } else {
                    newValue = currentValue + ((currentMax - currentMin) * 0.01);
                }
                break;

            case 'ArrowDown':
            case 'ArrowLeft':
            case 'Left':
            case 'Down':
                if (currentValue === 0) {
                    newValue = 0;
                } else if (stepValue) {
                    newValue = currentValue - stepValue;
                } else {
                    newValue = currentValue - ((currentMax - currentMin) * 0.01);
                }
                break;

            case 'Home':
                newValue = currentMin;
                break;

            case 'End':
                newValue = currentMax;
                break;

            case 'PageUp':
                if (currentValue === 100) {
                    newValue = 100;
                } else if (stepValue) {
                    if ((currentValue + stepValue) > currentMax) {
                        newValue = currentMax;
                    } else {
                        newValue = currentValue + stepValue;
                    }
                } else {
                    const calc = currentValue + ((currentMax - currentMin) * 0.1);
                    if (calc > currentMax) {
                        newValue = currentMax;
                    } else {
                        newValue = calc;
                    }
                }
                break;

            case 'PageDown':
                if (currentValue === 0) {
                    newValue = 0;
                } else if (stepValue) {
                    if ((currentValue - stepValue) < currentMin) {
                        newValue = currentMin;
                    } else {
                        newValue = currentValue - stepValue;
                    }
                } else {
                    const calc = currentValue - ((currentMax - currentMin) * 0.1);
                    if (calc < currentMin) {
                        newValue = currentMin;
                    } else {
                        newValue = calc;
                    }
                }
                break;

            default:
                break;
            }

            if (currentClass.contains('noUi-handle-upper')) {
                upperValue = newValue;
            } else if (lowerValue) {
                lowerValue = newValue;
            }
            updateSliderValue(currentElement, newValue, lowerValue, upperValue);
        }
    }
}

export function sliderInit() {
    const noUiTargets = document.querySelectorAll('.kmx-slider');
    noUiTargets.forEach((uiTarget) => {
        uiTarget.addEventListener('keydown', (event) => {
            sliderKeyPress(event);
        });
    });
}

